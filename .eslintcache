[{"/Users/tlochner/Documents/Repos/ReactEmployeeDirectory/src/index.js":"1","/Users/tlochner/Documents/Repos/ReactEmployeeDirectory/src/App.js":"2","/Users/tlochner/Documents/Repos/ReactEmployeeDirectory/src/utils/API.js":"3","/Users/tlochner/Documents/Repos/ReactEmployeeDirectory/src/utils/EmployeeContext.js":"4","/Users/tlochner/Documents/Repos/ReactEmployeeDirectory/src/components/Footer.js":"5","/Users/tlochner/Documents/Repos/ReactEmployeeDirectory/src/components/EmployeeDirectory.js":"6","/Users/tlochner/Documents/Repos/ReactEmployeeDirectory/src/components/Header.js":"7","/Users/tlochner/Documents/Repos/ReactEmployeeDirectory/src/components/Nav.js":"8","/Users/tlochner/Documents/Repos/ReactEmployeeDirectory/src/components/EmployeeTable.js":"9","/Users/tlochner/Documents/Repos/ReactEmployeeDirectory/src/components/EmployeeRowData.js":"10","/Users/tlochner/Documents/Repos/ReactEmployeeDirectory/src/components/FilterBar.js":"11"},{"size":215,"mtime":1608410987252,"results":"12","hashOfConfig":"13"},{"size":322,"mtime":1611006362528,"results":"14","hashOfConfig":"13"},{"size":253,"mtime":1610149221563,"results":"15","hashOfConfig":"13"},{"size":115,"mtime":1611005002278,"results":"16","hashOfConfig":"13"},{"size":223,"mtime":1611006385386,"results":"17","hashOfConfig":"13"},{"size":2426,"mtime":1611007174986,"results":"18","hashOfConfig":"13"},{"size":273,"mtime":1611006380090,"results":"19","hashOfConfig":"13"},{"size":301,"mtime":1611006231971,"results":"20","hashOfConfig":"13"},{"size":1307,"mtime":1611007311206,"results":"21","hashOfConfig":"13"},{"size":1547,"mtime":1611007453181,"results":"22","hashOfConfig":"13"},{"size":1920,"mtime":1611006240035,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"nie8cm",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"26"},"/Users/tlochner/Documents/Repos/ReactEmployeeDirectory/src/index.js",[],["49","50"],"/Users/tlochner/Documents/Repos/ReactEmployeeDirectory/src/App.js",[],"/Users/tlochner/Documents/Repos/ReactEmployeeDirectory/src/utils/API.js",[],"/Users/tlochner/Documents/Repos/ReactEmployeeDirectory/src/utils/EmployeeContext.js",[],"/Users/tlochner/Documents/Repos/ReactEmployeeDirectory/src/components/Footer.js",[],"/Users/tlochner/Documents/Repos/ReactEmployeeDirectory/src/components/EmployeeDirectory.js",["51","52"],"import React, {useState, useEffect} from \"react\";\nimport EmployeeTable from \"./EmployeeTable\";\nimport Nav from \"./Nav\";\nimport API from \"../utils/API\";\n//import \"./EmployeeDirectory.css\";\n\n//STORE CONTEXT HERE -->\nimport EmployeeContext from \"../utils/EmployeeContext\"\n\nlet employees = [];\nlet filteredEmployees = [];\n\nconst EmployeeDirectory = () => {\n        const [ employees , setEmployeeState] = useState({\n            //Start out the employees as an empty array. \n            employees: [],\n            //Begin filtered employees list as an empty array. \n            filteredEmployees: [],\n            //default the sort order to ascending\n            order: \"ascend\",\n            //Declare the our default sort mode should be by name. This is the most logical way to do so. \n            orderHeading :\"Name\",\n        \n            //HEADINGS ARE TO BE PASSED INTO OUR EMP TABLE --> THIS PROVIDES SIZING AND NAMES FOR OUR COLUMNS\n            headings: [{\n                name: \"\",\n                width: \"10%\",\n            },\n            {\n                name: \"First\",\n                width: \"10%\",\n            },\n            {\n                name: \"Last\",\n                width: \"10%\",\n            },\n            {\n                name: \"Email\",\n                width: \"20%\",\n            },\n            {\n                name: \"Age\",\n                width: \"15%\",\n            },\n            {\n                name: \"Birthday\",\n                width: \"15%\",\n            }\n            ]\n        });\n        //ADD FILTER\n        //ADD SORT\n\n        //USE EFFECT HOOK TO USE API AND RETURN BACK EMPLOYEE RESULTS\nuseEffect(() => {\n    API.getEmployeeList().then(results => {\n        // DIRECTORY INITIAL STATE WILL CLEAR ALL ARRAYS\n        setEmployeeState({ ...employees, employees: results.data.results, filteredEmployees: results.data.results, order: \"descend\" });\n        //console.log(results.data.results);\n    });\n}, [] );\n\n//RETURN AND RENDER THE JSX\n      return (\n        <EmployeeContext.Provider\n            value={{ employees, filteredEmployees,  /*sortList*/ }}>\n            <Nav />\n            {/* if no names are found matching the filter display that in place of the table*/}\n            <div className=\"data-area\"> {employees.filteredEmployees.length > 0 ? <EmployeeTable /> : <div> NO MATCHING NAMES FOUND </div>}</div>\n        </EmployeeContext.Provider>\n\n    );\n};\n\nexport default EmployeeDirectory;","/Users/tlochner/Documents/Repos/ReactEmployeeDirectory/src/components/Header.js",[],"/Users/tlochner/Documents/Repos/ReactEmployeeDirectory/src/components/Nav.js",[],"/Users/tlochner/Documents/Repos/ReactEmployeeDirectory/src/components/EmployeeTable.js",[],"/Users/tlochner/Documents/Repos/ReactEmployeeDirectory/src/components/EmployeeRowData.js",[],"/Users/tlochner/Documents/Repos/ReactEmployeeDirectory/src/components/FilterBar.js",["53"],"import React, { useContext } from \"react\";\n//import \"./SearchEmployees.css\";\nimport EmployeeContext from \"../utils/EmployeeContext\";\nimport EmployeeDirectory from \"./EmployeeDirectory\";\n\n\nconst FilterBar = () => {\n    \n    const context = useContext(EmployeeContext);\n\n    return (\n        <div className=\"searchbox\">\n            \n            <form className=\"form-inline\">\n            \n                <input\n                    className=\"form-control mr-sm-2\"\n                    name=\"millenials\"\n                    type=\"radio\"\n                    value='<41'\n                    placeholder=\"Filter by Cohort\"\n                    aria-label=\"Search\"\n                    onChange={filterName => EmployeeDirectory.filterEmployees(filterName)}\n                />  \n                <label for=\"millenials\">Millenials</label><br/>\n\n                <input\n                    className=\"form-control mr-sm-2\"\n                    type=\"radio\"\n                    name=\"genx\"\n                    value='41...57'\n                    placeholder=\"Filter by Cohort\"\n                    aria-label=\"Search\"\n                    onChange={filterName => EmployeeDirectory.filterEmployees(filterName)}\n                />\n                <label for=\"genx\">Gen-X</label><br/>\n                <input\n                    className=\"form-control mr-sm-2\"\n                    type=\"radio\"\n                    name=\"boomers\"\n                    value='>57'\n                    placeholder=\"Filter by Cohort\"\n                    aria-label=\"Search\"\n                    onChange={filterName => EmployeeDirectory.filterEmployees(filterName)}\n                />\n                <label for=\"boomers\">Boomers</label><br/>\n\n                <hr></hr>\n\n                <button className=\"btn my-2 my-sm-0\" type=\"submit\">\n                    Reload\n                 </button>\n            </form>\n        </div>\n    );\n}\n\nexport default FilterBar;",{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":10,"column":5,"nodeType":"60","messageId":"61","endLine":10,"endColumn":14},{"ruleId":"62","severity":1,"message":"63","line":61,"column":4,"nodeType":"64","endLine":61,"endColumn":6,"suggestions":"65"},{"ruleId":"58","severity":1,"message":"66","line":9,"column":11,"nodeType":"60","messageId":"61","endLine":9,"endColumn":18},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"no-unused-vars","'employees' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'employees'. Either include it or remove the dependency array. You can also do a functional update 'setEmployeeState(e => ...)' if you only need 'employees' in the 'setEmployeeState' call.","ArrayExpression",["69"],"'context' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"70","fix":"71"},"Update the dependencies array to be: [employees]",{"range":"72","text":"73"},[1928,1930],"[employees]"]