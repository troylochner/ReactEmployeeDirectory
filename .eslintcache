[{"/Users/tlochner/Documents/Repos/ReactEmployeeDirectory/src/index.js":"1","/Users/tlochner/Documents/Repos/ReactEmployeeDirectory/src/App.js":"2","/Users/tlochner/Documents/Repos/ReactEmployeeDirectory/src/utils/API.js":"3","/Users/tlochner/Documents/Repos/ReactEmployeeDirectory/src/utils/EmployeeContext.js":"4","/Users/tlochner/Documents/Repos/ReactEmployeeDirectory/src/components/Footer.js":"5","/Users/tlochner/Documents/Repos/ReactEmployeeDirectory/src/components/EmployeeDirectory.js":"6","/Users/tlochner/Documents/Repos/ReactEmployeeDirectory/src/components/Header.js":"7","/Users/tlochner/Documents/Repos/ReactEmployeeDirectory/src/components/EmployeeTable.js":"8","/Users/tlochner/Documents/Repos/ReactEmployeeDirectory/src/components/EmployeeRowData.js":"9","/Users/tlochner/Documents/Repos/ReactEmployeeDirectory/src/components/SortFilterBar.js":"10"},{"size":215,"mtime":1608410987252,"results":"11","hashOfConfig":"12"},{"size":360,"mtime":1611016252087,"results":"13","hashOfConfig":"12"},{"size":254,"mtime":1611024489900,"results":"14","hashOfConfig":"12"},{"size":115,"mtime":1611005002278,"results":"15","hashOfConfig":"12"},{"size":247,"mtime":1611105280893,"results":"16","hashOfConfig":"12"},{"size":3896,"mtime":1611025340234,"results":"17","hashOfConfig":"12"},{"size":250,"mtime":1611016113332,"results":"18","hashOfConfig":"12"},{"size":824,"mtime":1611105267880,"results":"19","hashOfConfig":"12"},{"size":1541,"mtime":1611016261752,"results":"20","hashOfConfig":"12"},{"size":1939,"mtime":1611106504395,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"7kli4f",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"24"},"/Users/tlochner/Documents/Repos/ReactEmployeeDirectory/src/index.js",[],["46","47"],"/Users/tlochner/Documents/Repos/ReactEmployeeDirectory/src/App.js",[],"/Users/tlochner/Documents/Repos/ReactEmployeeDirectory/src/utils/API.js",[],"/Users/tlochner/Documents/Repos/ReactEmployeeDirectory/src/utils/EmployeeContext.js",[],"/Users/tlochner/Documents/Repos/ReactEmployeeDirectory/src/components/Footer.js",[],"/Users/tlochner/Documents/Repos/ReactEmployeeDirectory/src/components/EmployeeDirectory.js",["48","49","50","51","52"],"import React, {useState, useEffect} from \"react\";\nimport EmployeeTable from \"./EmployeeTable\";\nimport API from \"../utils/API\";\nimport SortFilterBar from \"./SortFilterBar\"\n//import \"./EmployeeDirectory.css\";\n\n//STORE CONTEXT HERE -->\nimport EmployeeContext from \"../utils/EmployeeContext\"\n\nlet employees = [];\nlet filteredEmployees = [];\n\nconst EmployeeDirectory = () => {\n        const [ employees , setEmployeeState] = useState({\n            //Start out the employees as an empty array. \n            employees: [],\n            //Begin filtered employees list as an empty array. \n            filteredEmployees: [],\n            filterBy:\"all\",\n            //default the sort order to ascending\n            order: \"ascend\",\n            //Declare the our default sort mode should be by name. This is the most logical way to do so. \n            orderHeading :\"Age\",\n        \n            //HEADINGS ARE TO BE PASSED INTO OUR EMP TABLE --> THIS PROVIDES SIZING AND NAMES FOR OUR COLUMNS\n            headings: [{\n                name: \"\",\n                width: \"10%\",\n            },\n            {\n                name: \"First\",\n                width: \"10%\",\n            },\n            {\n                name: \"Last\",\n                width: \"10%\",\n            },\n            {\n                name: \"Email\",\n                width: \"20%\",\n            },\n            {\n                name: \"Age\",\n                width: \"15%\",\n            },\n            {\n                name: \"Birthday\",\n                width: \"15%\",\n            }\n            ]\n        });\n        \n        //ADD SORT\n        const sortEmployees = event =>{\n            console.log('fire sorting option ' + event.target.value);\n            const employeesToSort = employees.filteredEmployees;\n            const sortedEmployees = employeesToSort.sort(function(a,b){\n               if (event.target.value === 'ascend'){\n                   return a.dob.age - b.dob.age} else {\n                    return b.dob.age - a.dob.age\n                   }\n            })\n\n            setEmployeeState({ ...employees, filteredEmployees: sortedEmployees, order: event.target.value });\n\n        };\n\n        const filterEmployees = event =>{\n            console.log('fire filtering option ' + event.target.value)\n            const filterBy = event.target.value;\n            //console.log(filterBy);\n            const toFilter = employees.employees\n            const sortOrder = employees.order\n            //console.log(toFilter);\n            const y = toFilter.filter(person => {\n                switch (filterBy) {\n                    case 'all':\n                    return toFilter\n                    break;\n                    default:\n                    return person.gender === filterBy;\n                    break\n                };\n            });\n            //console.log(y)\n            //AFTER FILTER HAS BEEN APPLIED ---> SET THE EMPLOYEE STATE AGAIN --> JUST FOR THE FILTERED GROUP\n            setEmployeeState({ ...employees, filteredEmployees: y, order:sortOrder, filterBy:filterBy });\n                \n        }\n\n        //USE EFFECT HOOK TO USE API AND RETURN BACK EMPLOYEE RESULTS\nuseEffect(() => {\n    API.getEmployeeList().then(results => {\n        // DIRECTORY INITIAL STATE WILL CLEAR ALL ARRAYS\n        setEmployeeState({ ...employees, employees: results.data.results, filteredEmployees: results.data.results, order: \"ascend\" });\n        //console.log(results.data.results);\n    });\n}, [] );\n\n//RETURN AND RENDER THE JSX\n      return (\n       \n        <EmployeeContext.Provider value={{ employees, filterEmployees,  sortEmployees }}>\n            <SortFilterBar/>\n            <div className=\"data-area\"> {employees.filteredEmployees.length > 0 ? \n            <EmployeeTable />:<div> NO MATCHING NAMES FOUND </div>}\n            </div>\n        </EmployeeContext.Provider>\n       \n\n    );\n};\n\n\n\nexport default EmployeeDirectory;","/Users/tlochner/Documents/Repos/ReactEmployeeDirectory/src/components/Header.js",["53"],"import React from \"react\";\nimport FilterBar from \"./SortFilterBar\"\nimport \"./directory.css\";\n\nfunction Header () {\n    return (\n        <div className=\"header\">\n            <h1>Employee Directory</h1>\n        </div>\n    )\n}\n\nexport default Header;\n\n\n","/Users/tlochner/Documents/Repos/ReactEmployeeDirectory/src/components/EmployeeTable.js",[],"/Users/tlochner/Documents/Repos/ReactEmployeeDirectory/src/components/EmployeeRowData.js",[],"/Users/tlochner/Documents/Repos/ReactEmployeeDirectory/src/components/SortFilterBar.js",["54","55","56","57","58"],"import React, { useContext } from \"react\";\nimport EmployeeContext from \"../utils/EmployeeContext\";\nconst SortFilterBar = () => {\n\n    const context = useContext(EmployeeContext);\n\n    return (\n\n    <div className=\"container\">\n        <div className='Row'>\n        <div className='col-12'><p>Find Employees by Gender</p></div>\n        <div className='col-12'>\n\n            <input id=\"all\" className=\"btn-check\" type=\"radio\" value='all' checked={context.employees.filterBy === \"all\"} onClick={event => context.filterEmployees(event)}></input>\n            <label for=\"all\" className=\"btn btn-neutral\" for=\"all\">All</label>\n\n            <input id=\"male\" className=\"btn-check\" type=\"radio\" value='male' checked={context.employees.filterBy === \"male\"} onClick={event => context.filterEmployees(event)}></input>\n            <label for=\"male\" className=\"btn btn-neutral\" for=\"male\">Men</label>\n            \n            <input id=\"female\" className=\"btn-check\" type=\"radio\" value='female' checked={context.employees.filterBy === \"female\"} onClick={event => context.filterEmployees(event)}></input>\n            <label for='female' className=\"btn btn-neutral\" for=\"female\">Women</label>\n\n        </div>\n\n        <div className='col-12'><p>Sort Employees by Age</p></div>\n        <div className='col-12'>\n            \n            <input id=\"old\" className=\"btn-check\" type=\"radio\" value='descend' checked={context.employees.order === \"descend\"} onClick={event => context.sortEmployees(event)}></input>\n            <label for=\"old\" className=\"btn btn-neutral\" for=\"old\">Old to Young </label>\n\n            <input id=\"young\" className=\"btn-check\" type=\"radio\" value='ascend' checked={context.employees.order === \"ascend\"} onClick={event => context.sortEmployees(event)}></input>\n            <label for=\"young\" className=\"btn btn-neutral\" for=\"young\">Young to Old</label>\n\n        </div>\n        </div>\n\n    </div>\n\n    );\n}\n\nexport default SortFilterBar;",{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":10,"column":5,"nodeType":"65","messageId":"66","endLine":10,"endColumn":14},{"ruleId":"63","severity":1,"message":"67","line":11,"column":5,"nodeType":"65","messageId":"66","endLine":11,"endColumn":22},{"ruleId":"68","severity":1,"message":"69","line":79,"column":21,"nodeType":"70","messageId":"71","endLine":79,"endColumn":27},{"ruleId":"68","severity":1,"message":"69","line":82,"column":21,"nodeType":"70","messageId":"71","endLine":82,"endColumn":26},{"ruleId":"72","severity":1,"message":"73","line":98,"column":4,"nodeType":"74","endLine":98,"endColumn":6,"suggestions":"75"},{"ruleId":"63","severity":1,"message":"76","line":2,"column":8,"nodeType":"65","messageId":"66","endLine":2,"endColumn":17},{"ruleId":"77","severity":1,"message":"78","line":15,"column":58,"nodeType":"79","endLine":15,"endColumn":67},{"ruleId":"77","severity":1,"message":"78","line":18,"column":59,"nodeType":"79","endLine":18,"endColumn":69},{"ruleId":"77","severity":1,"message":"78","line":21,"column":61,"nodeType":"79","endLine":21,"endColumn":73},{"ruleId":"77","severity":1,"message":"78","line":29,"column":58,"nodeType":"79","endLine":29,"endColumn":67},{"ruleId":"77","severity":1,"message":"78","line":32,"column":60,"nodeType":"79","endLine":32,"endColumn":71},"no-native-reassign",["80"],"no-negated-in-lhs",["81"],"no-unused-vars","'employees' is assigned a value but never used.","Identifier","unusedVar","'filteredEmployees' is assigned a value but never used.","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'employees'. Either include it or remove the dependency array. You can also do a functional update 'setEmployeeState(e => ...)' if you only need 'employees' in the 'setEmployeeState' call.","ArrayExpression",["82"],"'FilterBar' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-global-assign","no-unsafe-negation",{"desc":"83","fix":"84"},"Update the dependencies array to be: [employees]",{"range":"85","text":"86"},[3456,3458],"[employees]"]